package com.lightningkite.kotlin.anko.viewcontrollers;

import android.content.res.Resources
import android.view.View
import com.lightningkite.kotlin.anko.ViewGenerator
import com.lightningkite.kotlin.anko.activity.ActivityAccess
import com.lightningkite.kotlin.anko.lifecycle
import com.lightningkite.kotlin.lifecycle.LifecycleListener
import java.io.Closeable

/**
 * An object that manages a view.
 * They are typically stored statically, ensuring that the view controller's data is retained between view recreations.
 * It should retain no references to the views except between calls to [make] and [unmake].
 * Created by jivie on 6/26/15.
 */
@Deprecated("Use a view generator and associated model instead.")
interface ViewController : Closeable, ViewGenerator<Unit> {
    /**
     * An empty/dummy view controller.
     */
    object EMPTY : ViewController {
        override fun make(vcContext: VCContext): View = View(vcContext.context)
    }

    override fun invoke(access: ActivityAccess, model: Unit): View {
        val newView = make(access)

        //TODO add animation listeners?

        //add unmake listener
        newView.lifecycle.connect(object : LifecycleListener {
            override fun onStart() {}

            override fun onStop() {
                unmake(newView)
            }
        })

        return newView
    }

    /**
     * Makes a view that displays the information within this controller.
     */
    fun make(vcContext: VCContext): View

    /**
     * Called when the view is fully animated in.
     */
    fun animateInComplete(vcContext: VCContext, view: View) {
    }

    /**
     * Called when the view is fully animated in.
     */
    fun animateOutStart(vcContext: VCContext, view: View) {
    }

    /**
     * Clean up a view generated by this view controller.
     */
    fun unmake(view: View) {
    }

    /**
     * Dispose anything that needs to be disposed.  After this is called, you should never use this object again.
     */
    fun dispose(): Unit {}

    override fun close(): Unit = dispose()

    /**
     * Gets the human-friendly title of this view.  Useful for putting the title on the action bar, if you use one.
     */
    fun getTitle(resources: Resources): String = "Untitled"


    /**
     * Called when back is pressed.
     * Example usage:
     * override fun onBackPressed(backAction:()->Unit){
     *      if(canGoBack) backAction()
     *      else informUserWhy()
     * }
     * @param backAction Execute this function to do the parent's onBackPressed.
     */
    fun onBackPressed(backAction: () -> Unit) {
        backAction()
    }
}
